defaultTasks 'clean', 'test', 'aggregate'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "net.serenity-bdd.serenity-gradle-plugin"

group 'org.automation.web'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}
tasks.register('generateHtmlReports', Copy) {
    from 'target/site/serenity'
    into 'build/reports/serenity'
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:4.0.46")
        classpath("net.serenity-bdd:serenity-single-page-report:4.0.46")
    }
}

compileJava.options.encoding = "utf-8"
compileTestJava.options.encoding = "utf-8"

serenity {
    reports = ["single-page-html"]
    /*testRoot = "starter"
    requirementsDir = "src/test/resources/features"*/
}


ext {
    serenityVersion = '4.0.46'
}

ext {
    serenityCoreVersion = '4.0.46'
    junitVersion = '3.4.1'
    assertJVersion = '3.24.2'
    slf4jVersion = '2.0.5'
    selenium = '4.8.1'

}

dependencies {


    implementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-junit:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}",
            "net.serenity-bdd:serenity-cucumber:${serenityCoreVersion}",
            "org.assertj:assertj-core:${assertJVersion}",
            "org.slf4j:slf4j-simple:${slf4jVersion}",
            "org.seleniumhq.selenium:selenium-java:${selenium}",
            implementation("com.googlecode.json-simple:json-simple:1.1.1")


}

test {

    testLogging.showStandardStreams = true

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    systemProperties System.getProperties()
    systemProperty "cucumber.options", System.getProperty("cucumber.options")
    systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")
}
tasks.withType(Test) {
    include '**/RunnerTestSuite.class'
}

gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)
